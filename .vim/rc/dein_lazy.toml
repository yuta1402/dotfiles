[[plugins]]
repo = 'Shougo/neosnippet'
on_event = 'InsertEnter'
hook_add = '''
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
'''
hook_source = '''
    let g:neosnippet#snippets_directory = '~/.vim/snippets/'
'''

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
hook_source = '''
    let g:previm_enable_realtime = 0

    if has('mac')
        let g:previm_open_cmd = 'open -a Firefox'
    endif
'''

[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css']

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

# [[plugins]]
# repo = 'Quramy/tsuquyomi'
# on_ft = ['typescript']

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown']
hook_source = '''
    let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css']

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
    let g:go_fmt_command = "goimports"
    let g:go_fmt_fail_silently = 1
'''

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = ['pug']

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_add = '''
    nnoremap [denite] <Nop>
    nmap <Leader>s [denite]

    nnoremap <silent> [denite]<Space> :<C-u>Denite file/rec:~/.vim/rc<CR>

    nnoremap <silent> [denite]g :<C-u>Denite grep<CR>
    nnoremap <silent> [denite]f :<C-u>Denite file/rec<CR>
    nnoremap <silent> [denite]n :<C-u>Denite dein<CR>
    nnoremap <silent> [denite]b :<C-u>Denite buffer<CR>
'''
hook_source = '''
    call denite#custom#option('default', {
        \ 'prompt': '>',
        \})

    call denite#custom#map('insert', "<C-n>", '<denite:move_to_next_line>')
    call denite#custom#map('insert', "<C-p>", '<denite:move_to_previous_line>')
    call denite#custom#map('insert', "<C-t>", '<denite:do_action:tabopen>')
    call denite#custom#map('insert', "<C-v>", '<denite:do_action:vsplit>')
    call denite#custom#map('insert', "<C-s>", '<denite:do_action:split>')

    call denite#custom#map('matcher/ignore_globs', 'ignore_globs', [
        \ '.git/', '.DS_Store'
        \])
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_ignore_case = 1

    if !exists('g:deoplete#omni_patterns')
        let g:deoplete#omni_patterns = {}
    endif
'''

[[plugins]]
repo = 'zchee/deoplete-go'
on_ft = ['go']
build = 'make'
hook_source = '''
    let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
'''

# [[plugins]]
# repo = 'zchee/deoplete-clang'
# on_ft = ['c', 'cpp']
# depends = ['deoplete.nvim']
# hook_source = '''
#     if system('git rev-parse --is-inside-work-tree') == "true\n"
#         let s:git_root_directory = system('git rev-parse --show-cdup')
#         let s:project_directory = expand(fnamemodify(s:git_root_directory, ':p:h'))
#     endif
#
#     if !exists('g:deoplete#sources#clang#flags')
#         let g:deoplete#sources#clang#flags = []
#     endif
#
#     if exists('s:project_directory')
#         let s:project_directory_include = s:project_directory . '/include'
#         call add(g:deoplete#sources#clang#flags, '-I'.s:project_directory_include)
#     endif
#
#     let g:deoplete#sources#clang#sort_algo = 'priority'
#
#     if has('mac')
#         let g:deoplete#sources#clang#libclang_path='/Library/Developer/CommandLineTools/usr/lib/libclang.dylib'
#         let g:deoplete#sources#clang#clang_header='/Library/Developer/CommandLineTools/usr/include'
#     elseif has('unix')
#         let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm-6.0/lib/libclang.so.1'
#         let g:deoplete#sources#clang#clang_header = '/usr/include/clang/'
#     endif
# '''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = ['python']

[[plugins]]
repo = 'vim-jp/vim-cpp'
on_ft = ['c', 'cpp']
