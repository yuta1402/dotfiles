[[plugins]]
repo = 'Shougo/neosnippet'
on_event = 'InsertEnter'
hook_add = '''
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
'''
hook_source = '''
    let g:neosnippet#snippets_directory = '~/.vim/snippets/'
'''

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
hook_source = '''
    let g:previm_enable_realtime = 0

    if has('mac')
        let g:previm_open_cmd = 'open -a Firefox'
    endif
'''

[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css']

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

# [[plugins]]
# repo = 'Quramy/tsuquyomi'
# on_ft = ['typescript']

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown']
hook_source = '''
    let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css']

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
    let g:go_fmt_command = "goimports"
    let g:go_fmt_fail_silently = 1

    let g:go_def_mapping_enabled = 0
    let g:go_doc_keywordprg_enabled = 0
'''

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = ['pug']

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_add = '''
    nnoremap [denite] <Nop>
    nmap <Leader>s [denite]

    nnoremap <silent> [denite]<Space> :<C-u>Denite file/rec:~/.vim/rc<CR>

    nnoremap <silent> [denite]g :<C-u>Denite grep<CR>
    nnoremap <silent> [denite]f :<C-u>Denite file/rec<CR>
    nnoremap <silent> [denite]n :<C-u>Denite dein<CR>
    nnoremap <silent> [denite]b :<C-u>Denite buffer<CR>
'''
[plugins.ftplugin]
denite = '''
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr> t
    \ denite#do_map('do_action', 'tabopen')
    nnoremap <silent><buffer><expr> s
    \ denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> v
    \ denite#do_map('do_action', 'vsplit')
'''
hook_source = '''
    call denite#custom#option('default', {
        \ 'prompt': '>',
        \})

    call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ [ '.git/', '.DS_Store', '__pycache__/'])
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_ignore_case = 1

    if !exists('g:deoplete#omni_patterns')
        let g:deoplete#omni_patterns = {}
    endif
'''

# [[plugins]]
# repo = 'zchee/deoplete-go'
# on_ft = ['go']
# build = 'make'
# hook_source = '''
#     let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
# '''

# [[plugins]]
# repo = 'zchee/deoplete-clang'
# on_ft = ['c', 'cpp']
# depends = ['deoplete.nvim']
# hook_source = '''
#     if system('git rev-parse --is-inside-work-tree') == "true\n"
#         let s:git_root_directory = system('git rev-parse --show-cdup')
#         let s:project_directory = expand(fnamemodify(s:git_root_directory, ':p:h'))
#     endif
#
#     if !exists('g:deoplete#sources#clang#flags')
#         let g:deoplete#sources#clang#flags = []
#     endif
#
#     if exists('s:project_directory')
#         let s:project_directory_include = s:project_directory . '/include'
#         call add(g:deoplete#sources#clang#flags, '-I'.s:project_directory_include)
#     endif
#
#     let g:deoplete#sources#clang#sort_algo = 'priority'
#
#     if has('mac')
#         let g:deoplete#sources#clang#libclang_path='/Library/Developer/CommandLineTools/usr/lib/libclang.dylib'
#         let g:deoplete#sources#clang#clang_header='/Library/Developer/CommandLineTools/usr/include'
#     elseif has('unix')
#         let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm-6.0/lib/libclang.so.1'
#         let g:deoplete#sources#clang#clang_header = '/usr/include/clang/'
#     endif
# '''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = ['python']

[[plugins]]
repo = 'vim-jp/vim-cpp'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
    nnoremap <silent> <Leader>f :<C-u>Defx -toggle -listed -resume -split=vertical -winwidth=35 -direction=topleft  -buffer-name=tab`tabpagenr()`<CR>
'''
hook_source = '''
    call defx#custom#option('_', {
        \ 'show_ignored_files': 1,
        \ })

    call defx#custom#column('icon', {
        \ 'directory_icon': '+',
        \ 'opened_icon': '-',
        \ 'root_icon': ' ',
        \ })

    call defx#custom#column('mark', {
        \ 'readonly_icon': 'X',
        \ 'selected_icon': '*',
        \ })
'''
[plugins.ftplugin]
defx = '''
    nnoremap <silent><buffer><expr> <CR>
    \ defx#do_action('open')
    nnoremap <silent><buffer><expr> o
    \ defx#is_directory() ?
    \ defx#do_action('open_or_close_tree') . 'j':
    \ defx#do_action('drop')
    nnoremap <silent><buffer><expr> K
    \ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N
    \ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> <CR>
    \ defx#do_action('drop')
    nnoremap <silent><buffer><expr> h
    \ defx#is_opened_tree() ?
    \ defx#do_action('close_tree'):
    \ defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> l
    \ defx#is_directory() ?
    \ defx#do_action('open_or_close_tree') . 'j':
    \ defx#do_action('drop')
    nnoremap <silent><buffer><expr> .
    \ defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> s
    \ defx#do_action('multi', [['drop', 'split'], 'quit'])
    nnoremap <silent><buffer><expr> v
    \ defx#do_action('multi', [['drop', 'vsplit'], 'quit'])
    nnoremap <silent><buffer><expr> c
    \ defx#do_action('copy')
    nnoremap <silent><buffer><expr> m
    \ defx#do_action('move')
    nnoremap <silent><buffer><expr> p
    \ defx#do_action('paste')
    nnoremap <silent><buffer><expr> N
    \ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> K
    \ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> d
    \ defx#do_action('remove')
    nnoremap <silent><buffer><expr> r
    \ defx#do_action('rename')
    nnoremap <silent><buffer><expr> x
    \ defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy
    \ defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> ~
    \ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q
    \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space>
    \ defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> j
    \ line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k
    \ line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> cd
    \ defx#do_action('change_vim_cwd')
'''

[[plugins]]
repo = 'vim-scripts/confluencewiki.vim'
on_ft = ['confluencewiki']
