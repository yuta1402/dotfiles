[[plugins]]
repo = 'Shougo/neosnippet'
on_event = 'InsertEnter'
hook_add = '''
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
'''
hook_source = '''
    let g:neosnippet#snippets_directory = '~/.vim/snippets/'
'''

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
hook_source = '''
    let g:previm_enable_realtime = 0

    if has('mac')
        let g:previm_open_cmd = 'open -a Firefox'
    endif
'''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'sh -c "cd app & npm install"'
hook_source = '''
    let g:mkdp_auto_close = 0
'''

[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css']

[[plugins]]
repo = 'ianks/vim-tsx'
on_ft = ['javascriptreact', 'typescriptreact']

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript', 'typescriptreact']

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown']
hook_source = '''
    let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css']

[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = ['go']
hook_source = '''
'''

[[plugins]]
repo = 'mattn/vim-goaddtags'
on_ft = ['go']

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = ['pug']

[[plugins]]
repo = 'Shougo/denite.nvim'
if = '''has('python3')'''
on_cmd = 'Denite'
hook_add = '''
    nnoremap [denite] <Nop>
    nmap <Leader>d [denite]

    nnoremap <silent> [denite]<Space> :<C-u>Denite file/rec:~/.vim/rc<CR>

    nnoremap <silent> [denite]g :<C-u>Denite grep<CR>
    nnoremap <silent> [denite]f :<C-u>Denite file/rec<CR>
    nnoremap <silent> [denite]n :<C-u>Denite dein<CR>
    nnoremap <silent> [denite]b :<C-u>Denite buffer<CR>
'''
[plugins.ftplugin]
denite = '''
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr> t
    \ denite#do_map('do_action', 'tabopen')
    nnoremap <silent><buffer><expr> s
    \ denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> v
    \ denite#do_map('do_action', 'vsplit')
'''
hook_source = '''
    call denite#custom#option('default', {
        \ 'prompt': '>',
        \})

    call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ [ '.git/', '.DS_Store', '__pycache__/'])
'''

[[plugins]]
repo = 'vim-jp/vim-cpp'
on_ft = ['c', 'cpp']

# [[plugins]]
# repo = 'Shougo/defx.nvim'
# if = '''has('python3')'''
# hook_add = '''
#     nnoremap <silent> <Leader>f :<C-u>Defx -toggle -listed -resume -split=vertical -winwidth=35 -direction=topleft  -buffer-name=tab`tabpagenr()`<CR>
# '''
# hook_source = '''
#     call defx#custom#option('_', {
#         \ 'show_ignored_files': 1,
#         \ })
#
#     call defx#custom#column('icon', {
#         \ 'directory_icon': '+ ',
#         \ 'file_icon': '  ',
#         \ 'opened_icon': '- ',
#         \ 'root_icon': ' ',
#         \ })
#
#     call defx#custom#column('mark', {
#         \ 'readonly_icon': 'X',
#         \ 'selected_icon': '*',
#         \ })
#
#     autocmd FileType defx setlocal nonumber
# '''
# [plugins.ftplugin]
# defx = '''
#     nnoremap <silent><buffer><expr> <CR>
#     \ defx#do_action('open')
#     nnoremap <silent><buffer><expr> o
#     \ defx#is_directory() ?
#     \ defx#do_action('open_or_close_tree') . 'j':
#     \ defx#do_action('drop')
#     nnoremap <silent><buffer><expr> O
#     \ defx#do_action('open','tabnew')
#     nnoremap <silent><buffer><expr> K
#     \ defx#do_action('new_directory')
#     nnoremap <silent><buffer><expr> N
#     \ defx#do_action('new_file')
#     nnoremap <silent><buffer><expr> <CR>
#     \ defx#do_action('drop')
#     nnoremap <silent><buffer><expr> h
#     \ defx#is_opened_tree() ?
#     \ defx#do_action('close_tree'):
#     \ defx#do_action('cd', ['..'])
#     nnoremap <silent><buffer><expr> l
#     \ defx#is_directory() ?
#     \ defx#do_action('open_or_close_tree') . 'j':
#     \ defx#do_action('drop')
#     nnoremap <silent><buffer><expr> .
#     \ defx#do_action('toggle_ignored_files')
#     nnoremap <silent><buffer><expr> s
#     \ defx#do_action('multi', [['drop', 'split'], 'quit'])
#     nnoremap <silent><buffer><expr> v
#     \ defx#do_action('multi', [['drop', 'vsplit'], 'quit'])
#     nnoremap <silent><buffer><expr> c
#     \ defx#do_action('copy')
#     nnoremap <silent><buffer><expr> m
#     \ defx#do_action('move')
#     nnoremap <silent><buffer><expr> p
#     \ defx#do_action('paste')
#     nnoremap <silent><buffer><expr> N
#     \ defx#do_action('new_file')
#     nnoremap <silent><buffer><expr> K
#     \ defx#do_action('new_directory')
#     nnoremap <silent><buffer><expr> d
#     \ defx#do_action('remove')
#     nnoremap <silent><buffer><expr> r
#     \ defx#do_action('rename')
#     nnoremap <silent><buffer><expr> x
#     \ defx#do_action('execute_system')
#     nnoremap <silent><buffer><expr> yy
#     \ defx#do_action('yank_path')
#     nnoremap <silent><buffer><expr> ~
#     \ defx#do_action('cd')
#     nnoremap <silent><buffer><expr> q
#     \ defx#do_action('quit')
#     nnoremap <silent><buffer><expr> <Space>
#     \ defx#do_action('toggle_select') . 'j'
#     nnoremap <silent><buffer><expr> j
#     \ line('.') == line('$') ? 'gg' : 'j'
#     nnoremap <silent><buffer><expr> k
#     \ line('.') == 1 ? 'G' : 'k'
#     nnoremap <silent><buffer><expr> cd
#     \ defx#do_action('change_vim_cwd')
# '''

[[plugins]]
repo = 'vim-scripts/confluencewiki.vim'
on_ft = ['confluencewiki']

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform', 'tf']
hook_source = '''
    let g:terraform_fmt_on_save=1
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = 'denops.vim'
on_event = 'InsertEnter'
hook_source = '''
    call ddc#custom#patch_global('ui', 'native')

    call ddc#custom#patch_global('sources', [
    \ 'vim-lsp',
    \ 'around',
    \ 'neosnippet',
    \ 'file',
    \ ])

    call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
    \   'ignoreCase': v:true,
    \   'matchers': ['matcher_head'],
    \   'sorters': ['sorter_rank'],
    \ },
    \ 'around': {'mark': 'A'},
    \ 'neosnippet': {
    \   'mark': 'ns',
    \   'dup': v:true,
    \ },
    \ 'vim-lsp': {
    \   'mark': 'lsp',
    \   'matchers': ['matcher_head'],
    \   'forceCompletionPattern': '\.|:|->',
    \   'minAutoCompleteLength': 1,
    \ },
    \ 'file': {
    \   'mark': 'f',
    \   'isVolatile': v:true,
    \   'forceCompletionPattern': '\S/\S*',
    \ },
    \ })

    call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = 'ddc.vim'
depends = 'vim-lsp'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tokorom/vim-review'
on_ft = ['review']

[[plugins]]
repo = 'github/copilot.vim'

[[plugins]]
repo = 'Shougo/ddu.vim'
depends = 'denops.vim'
hook_source = '''
    call ddu#custom#patch_global({
    \   'ui': 'filer',
    \   'sources': [{'name': 'file', 'params': {}}],
    \   'sourceOptions': {
    \     'file': {
    \       'sorters': ['sorter_alpha'],
    \       'columns': ['filename'],
    \     },
    \   },
    \   'kindOptions': {
    \     'file': {
    \       'defaultAction': 'open',
    \     },
    \   },
    \   'uiOptions': {
    \     'filer': {
    \       'toggle': v:true
    \     },
    \   },
    \   'uiParams': {
    \     'filer': {
    \       'winWidth': 35,
    \       'sort': 'filename',
    \       'split': 'vertical',
    \       'splitDirection': 'topleft',
    \     }
    \   },
    \   'actionOptions': #{
    \     narrow: #{
    \       quit: v:false,
    \     },
    \     open: #{
    \       quit: v:false,
    \     },
    \   },
    \ })
'''

[[plugins]]
repo = 'Shougo/ddu-commands.vim'
depends = 'ddu.vim'
on_cmd = 'Ddu'

[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_hidden'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-sorter_alpha'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-action'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'
hook_add = '''
    nnoremap <silent> <Leader>f <Cmd>Ddu
    \ -name=filer-`tabpagenr()` -ui=filer -resume
    \ -source-option-file-columns=filename
    \ <CR>
'''
# hook_source = '''
#     autocmd MyAutoCmd TabEnter,WinEnter,CursorHold,FocusGained *
#     \ call ddu#ui#do_action('checkItems')
# '''
[plugins.ftplugin]
ddu-filer = '''
    nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#do_action('toggleSelectItem')<CR>
    nnoremap <buffer> *
        \ <Cmd>call ddu#ui#do_action('toggleAllItems')<CR>
    nnoremap <buffer> c
        \ <Cmd>call ddu#ui#multi_actions([
        \   ['itemAction', #{ name: 'copy' }],
        \   ['clearSelectAllItems'],
        \ ])<CR>
    nnoremap <buffer> d
        \ <Cmd>call ddu#ui#do_action('itemAction', #{ name: 'delete' })<CR>
    nnoremap <buffer> m
        \ <Cmd>call ddu#ui#do_action('itemAction', #{ name: 'move' })<CR>
    nnoremap <buffer> r
        \ <Cmd>call ddu#ui#do_action('itemAction', #{ name: 'rename' })<CR>
    nnoremap <buffer> x
        \ <Cmd>call ddu#ui#do_action('itemAction', #{ name: 'executeSystem' })<CR>
    nnoremap <buffer> h
        \ <Cmd>call ddu#ui#do_action('itemAction', #{ name: 'narrow', params: #{ path: '..' } })<CR>
    nnoremap <buffer><expr> <CR>
        \ ddu#ui#get_item()->get('isTree', v:false) ?
        \ "<Cmd>call ddu#ui#do_action('itemAction', #{ name: 'narrow' })<CR>" :
        \ tabpagewinnr(tabpagenr(), '$') <= 1 ?
        \ "<Cmd>call ddu#ui#multi_actions([
        \   ['itemAction', #{ name: 'open', params: #{ command: 'new' } }],
        \   ['quit'],
        \ ])<CR>" :
        \ "<Cmd>call ddu#ui#do_action('itemAction', #{ name: 'open', params: #{ command: 'wincmd p <Bar> edit' } })<CR>"
    nnoremap <buffer><expr> l
        \ ddu#ui#get_item()->get('isTree', v:false) ?
        \ "<Cmd>call ddu#ui#multi_actions([
        \   ['expandItem', #{ mode: 'toggle'}],
        \   ['cursorNext'],
        \ ])<CR>" :
        \ tabpagewinnr(tabpagenr(), '$') <= 1 ?
        \ "<Cmd>call ddu#ui#multi_actions([
        \   ['itemAction', #{ name: 'open', params: #{ command: 'new' } }],
        \   ['quit'],
        \ ])<CR>" :
        \ "<Cmd>call ddu#ui#do_action('itemAction', #{ name: 'open', params: #{ command: 'wincmd p <Bar> edit' } })<CR>"
    nnoremap <buffer><expr> o
        \ ddu#ui#get_item()->get('isTree', v:false) ?
        \ "<Cmd>call ddu#ui#multi_actions([
        \   ['expandItem', #{ mode: 'toggle'}],
        \   ['cursorNext'],
        \ ])<CR>" :
        \ tabpagewinnr(tabpagenr(), '$') <= 1 ?
        \ "<Cmd>call ddu#ui#multi_actions([
        \   ['itemAction', #{ name: 'open', params: #{ command: 'new' } }],
        \   ['quit'],
        \ ])<CR>" :
        \ "<Cmd>call ddu#ui#do_action('itemAction', #{ name: 'open', params: #{ command: 'wincmd p <Bar> edit' } })<CR>"
    nnoremap <buffer> O
        \ <Cmd>call ddu#ui#do_action('itemAction', #{
        \   name: 'open',
        \   params: #{ command: 'tabedit' },
        \ })<CR>
    nnoremap <buffer><expr> s
        \ tabpagewinnr(tabpagenr(), '$') <= 1 ?
        \ "<Cmd>call ddu#ui#multi_actions([
        \   ['itemAction', #{ name: 'open', params: #{ command: 'new' } }],
        \   ['quit'],
        \ ])<CR>" :
        \ "<Cmd>call ddu#ui#do_action('itemAction', #{ name: 'open', params: #{ command: 'wincmd p <Bar> split' } })<CR>"
    nnoremap <buffer><expr> v
        \ tabpagewinnr(tabpagenr(), '$') <= 1 ?
        \ "<Cmd>call ddu#ui#multi_actions([
        \   ['itemAction', #{ name: 'open', params: #{ command: 'new' } }],
        \   ['quit'],
        \ ])<CR>" :
        \ "<Cmd>call ddu#ui#do_action('itemAction', #{ name: 'open', params: #{ command: 'wincmd p <Bar> vsplit' } })<CR>"
    nnoremap <buffer> p
        \ <Cmd>call ddu#ui#do_action('itemAction', #{ name: 'paste'})<CR>
    nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#do_action('quit')<CR>
    nnoremap <buffer> K
        \ <Cmd>call ddu#ui#do_action('itemAction', #{ name: 'newDirectory' })<CR>
    nnoremap <buffer> N
        \ <Cmd>call ddu#ui#do_action('itemAction', #{ name: 'newFile' })<CR>
    nnoremap <buffer> .
        \ <Cmd>call ddu#ui#multi_actions([
        \   [
        \     'updateOptions', #{
        \       sourceOptions: #{
        \         file: #{
        \           matchers: ToggleHidden('file'),
        \         },
        \       },
        \     },
        \   ],
        \   [
        \      'redraw', #{ method: 'refreshItems' },
        \   ],
        \ ])<CR>

    function! ToggleHidden(name)
      return ddu#custom#get_current(b:ddu_ui_name)
            \ ->get('sourceOptions', {})
            \ ->get(a:name, {})
            \ ->get('matchers', [])
            \ ->empty() ? ['matcher_hidden'] : []
    endfunction
'''
