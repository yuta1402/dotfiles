[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'Shougo/vimshell.vim'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = get(g:, 'quickrun_config', {})

    let g:quickrun_config['_'] = {
    \    'runner' : 'vimproc',
    \    'runner/vimproc/updatetime' : 60,
    \    'outputter/buffer/split' : ':botright 8sp',
    \    'outputter/buffer/close_on_empty' : 1,
    \}

    let g:quickrun_config['tex'] = {
    \    'hook/cd/directory' : '%S:p:h',
    \    'command' : 'latexmk',
    \    'cmdopt' : '-pv',
    \    'srcfile' : '%:p:h:gs?$?/main.tex?',
    \}

    let g:quickrun_config['cpp'] = {
    \    'command' : 'g++',
    \    'cmdopt' : '-std=c++11',
    \}

    let g:quickrun_config['python'] = {
    \    'command' : 'python3',
    \}
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
    nnoremap <silent> <Leader>f :<C-u>Defx -toggle -listed -resume -split=vertical -winwidth=35 -direction=topleft  -buffer-name=tab`tabpagenr()`<CR>

    call defx#custom#option('_', {
        \ 'show_ignored_files': 1,
        \ })

	call defx#custom#column('icon', {
	    \ 'directory_icon': '+',
	    \ 'opened_icon': '-',
	    \ 'root_icon': ' ',
	    \ })

	call defx#custom#column('mark', {
	    \ 'readonly_icon': 'X',
	    \ 'selected_icon': '*',
	    \ })

    let g:defx_icons_enable_syntax_highlight = 1
    let g:defx_icons_column_length = 2

    autocmd FileType defx call s:defx_my_settings()
        function! s:defx_my_settings() abort
          nnoremap <silent><buffer><expr> <CR>
          \ defx#do_action('open')
          nnoremap <silent><buffer><expr> o
          \ defx#is_directory() ?
          \ defx#do_action('open_or_close_tree') . 'j':
          \ defx#do_action('drop')
          nnoremap <silent><buffer><expr> K
          \ defx#do_action('new_directory')
          nnoremap <silent><buffer><expr> N
          \ defx#do_action('new_file')
          nnoremap <silent><buffer><expr> <CR>
          \ defx#do_action('drop')
          nnoremap <silent><buffer><expr> h
          \ defx#is_opened_tree() ?
          \ defx#do_action('close_tree'):
          \ defx#do_action('cd', ['..'])
          nnoremap <silent><buffer><expr> l
          \ defx#is_directory() ?
          \ defx#do_action('open_or_close_tree') . 'j':
          \ defx#do_action('drop')
          nnoremap <silent><buffer><expr> .
          \ defx#do_action('toggle_ignored_files')
          nnoremap <silent><buffer><expr> s
          \ defx#do_action('multi', [['drop', 'split'], 'quit'])
          nnoremap <silent><buffer><expr> v
          \ defx#do_action('multi', [['drop', 'vsplit'], 'quit'])
          nnoremap <silent><buffer><expr> c
          \ defx#do_action('copy')
          nnoremap <silent><buffer><expr> m
          \ defx#do_action('move')
          nnoremap <silent><buffer><expr> p
          \ defx#do_action('paste')
          nnoremap <silent><buffer><expr> N
          \ defx#do_action('new_file')
          nnoremap <silent><buffer><expr> K
          \ defx#do_action('new_directory')
          nnoremap <silent><buffer><expr> d
          \ defx#do_action('remove')
          nnoremap <silent><buffer><expr> r
          \ defx#do_action('rename')
          nnoremap <silent><buffer><expr> x
          \ defx#do_action('execute_system')
          nnoremap <silent><buffer><expr> yy
          \ defx#do_action('yank_path')
          nnoremap <silent><buffer><expr> ~
          \ defx#do_action('cd')
          nnoremap <silent><buffer><expr> q
          \ defx#do_action('quit')
          nnoremap <silent><buffer><expr> <Space>
          \ defx#do_action('toggle_select') . 'j'
          nnoremap <silent><buffer><expr> j
          \ line('.') == line('$') ? 'gg' : 'j'
          nnoremap <silent><buffer><expr> k
          \ line('.') == 1 ? 'G' : 'k'
          nnoremap <silent><buffer><expr> cd
          \ defx#do_action('change_vim_cwd')
    endfunction
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
    \    'colorscheme': 'wombat',
    \}
'''

[[plugins]]
repo = 'jonathanfilip/vim-lucius'
hook_add = '''
    let g:lucius_style = 'dark'
    let g:lucius_contrast = 'normal'
'''

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'cohama/agit.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    autocmd BufWritePost * GitGutter
    set updatetime=100
'''

[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_fix_on_save = 1
    let g:ale_set_signs = 1
    let g:ale_sign_column_always = 1

    let g:ale_linters = {
    \   'javascript': ['eslint'],
    \   'go': ['golint', 'gofmt'],
    \   'cpp': [],
    \}

    let g:ale_fixers = {
    \   'javascript': ['prettier'],
    \   'json': ['prettier'],
    \   'cpp': [],
    \}
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
    set hidden

    let s:project_directory = './'

    if system('git rev-parse --is-inside-work-tree') == "true\n"
        let s:git_root_directory = system('git rev-parse --show-cdup')
        let s:project_directory = expand(fnamemodify(s:git_root_directory, ':p:h'))
    endif

    let g:LanguageClient_serverCommands = {
    \   'c': ['clangd', '--compile-commands-dir=' . s:project_directory . '/build', '--header-insertion=never'],
    \   'cpp': ['clangd', '--compile-commands-dir=' . s:project_directory . '/build', '--header-insertion=never'],
    \   'javascript': ['javascript-typescript-stdio'],
    \   'typescript': ['javascript-typescript-stdio'],
    \   'go': ['gopls'],
    \}

    function LC_maps()
      if has_key(g:LanguageClient_serverCommands, &filetype)
        nnoremap <buffer> <silent> K :call LanguageClient#textDocument_hover()<cr>
        nnoremap <buffer> <silent> gd :call LanguageClient#textDocument_definition()<CR>
        nnoremap <buffer> <silent> gr :call LanguageClient#textDocument_references()<CR>
        nnoremap <buffer> <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
      endif
    endfunction

    autocmd FileType * call LC_maps()

    let g:LanguageClient_autoStart = 1
    let g:LanguageClient_hoverPreview = "Never"
'''
